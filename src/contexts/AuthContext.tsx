
import React, { createContext, useState, useContext, ReactNode, useEffect } from 'react';

interface User {
  id: string;
  name: string;
  email: string;
  role: 'user' | 'admin';
}

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  login: (email: string, password: string) => Promise<void>;
  register: (name: string, email: string, password: string) => Promise<void>;
  forgotPassword: (email: string) => Promise<void>;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider = ({ children }: AuthProviderProps) => {
  const [user, setUser] = useState<User | null>(null);
  
  useEffect(() => {
    // Check for saved user in localStorage
    const savedUser = localStorage.getItem('agriadvisor_user');
    if (savedUser) {
      setUser(JSON.parse(savedUser));
    }
  }, []);

  // For demo purposes, this is a simple auth implementation
  // In production, you would connect to a backend service
  const login = async (email: string, password: string) => {
    // Mock authentication
    if (email === 'admin@example.com' && password === 'password') {
      const adminUser = {
        id: '1',
        name: 'Admin User',
        email: 'admin@example.com',
        role: 'admin' as const
      };
      setUser(adminUser);
      localStorage.setItem('agriadvisor_user', JSON.stringify(adminUser));
      return;
    } else if (email === 'user@example.com' && password === 'password') {
      const normalUser = {
        id: '2',
        name: 'Normal User',
        email: 'user@example.com',
        role: 'user' as const
      };
      setUser(normalUser);
      localStorage.setItem('agriadvisor_user', JSON.stringify(normalUser));
      return;
    }
    
    throw new Error('Invalid credentials');
  };

  const register = async (name: string, email: string, password: string) => {
    // Mock registration
    const newUser = {
      id: '3', // In a real app, this would be generated by the backend
      name,
      email,
      role: 'user' as const
    };
    
    setUser(newUser);
    localStorage.setItem('agriadvisor_user', JSON.stringify(newUser));
  };
  
  const forgotPassword = async (email: string) => {
    // Mock forgot password functionality
    // In a real app, this would send a reset link to the user's email
    if (!email) {
      throw new Error('Email is required');
    }
    
    // For demo, we'll just simulate success
    return Promise.resolve();
  };

  const logout = () => {
    setUser(null);
    localStorage.removeItem('agriadvisor_user');
  };

  return (
    <AuthContext.Provider value={{ 
      user, 
      isAuthenticated: !!user, 
      login, 
      register, 
      forgotPassword,
      logout 
    }}>
      {children}
    </AuthContext.Provider>
  );
};
